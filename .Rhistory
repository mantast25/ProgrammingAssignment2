libary(swirl)
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
library(swirl)
swirl()
x
x[1:10]
x[isn.na(x)]
x[is.na(x)]
x[!is.na(x)]
x <- x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar =2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect ["bar"]
vect[c("foo", "bar")]
myVector <- 1:20
myVector
dim(myVector)
lenght(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix()
?matrix
myMatrix2 <- matrix(1:20, nrows=4, ncol=5)
myMatrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(vector, myMatrix)
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(canmes)
colnames(cnames)
colnames(myData) <- cnames
myData
y <- 5
u <- if(x<3) {
NA
} else {
10
}
x <- 5
y <- if(x<3) {
NA
} else {
10
}
y
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <-10
f(3)
dir()
dir("specdata")
read.csv("007.csv")
read.csv("specdata")
dir("specdata")
read.csv(specdata[0.001.csv])
read.csv(specdata[0.01.csv])
read.csv(specdata[001.csv])
read.csv(001.csv])
read.csv(001.csv)
read.csv("001.csv")
read.csv(specdata,"001.csv")
?list.files
list.files(specdata)
?lapply
?setwd
?list.files
?length
pollutantmean <- function(directory, pollutant, id = 1:332) {
files <- dir("specdata", full.name = T)
for(i in length(id)){
a <- read.csv(files[i]) }
a
}
pollutantmean("specdata", "sulfate", 1:10)
?length
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
submit()
?complete.cases
?sum
?Aggregate
?colnames
?count
??count
complete <- function(directory, id = 1:332) {
files <- dir("specdata", full.names = T)
compcases <-matrix( , ncol=2, nrow=0)
as.data.frame(compcases)
colnames(compcases) <- c("id", "nobs")
for(i in id){
a <- read.csv(files[i])
non <- complete.cases(a)
count <- sum(non)
compcases <-rbind(compcases, c(i, count))
}
compcases
}
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
?as.data.frame
submit()
source("complete.R"")
source("complete.R")
source("complete.R")
complete ("specdata", 3)
complete ("specdata", 5)
submit()
submit()
?Data.frame
?data.frame
?colnames
?cor
?subset
?cor
?return
?cor
submit()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector()
a$set(c(1,2,3,4,5,6,7))
a$get
cachemean(a)
a$get()
cachemean(a)
cachemean(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
a <- makeCacheMatrix()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
//ads./
a <-matrix(1:4,2,2)
a
solve(a)
solve(a)
dir()
source("cachematrix.R")
wd()
getwd()
setwd("C:\Users\Mantas\ProgrammingAssignment2")
setwd("C:/Users/Mantas/ProgrammingAssignment2")
dir()
source("cachematrix.R")
a <- makeCacheMatrix
a
a <- makeCacheMatrix()
a
source("cachematrix.R")
a <- makeCacheMatrix()
a
class(a)
class(a$set)
a$set(matrix=(1:6,2,3))
a$set(matrix(1:6,2,3))
a$get()
cachesolve(a)
cacheSolve(a)
a$set(matrix(1:9,3,3))
a$get()
cacheSolve(a)
a$set(matrix(1:4,2,2))
a$get()
cacheSolve(a)
